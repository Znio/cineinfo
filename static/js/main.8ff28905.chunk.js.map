{"version":3,"sources":["images/default-image-portrait.png","images/banner.jpg","images/logo.svg","components/Header/index.js","components/Header/header.jsx","components/Footer/index.js","components/Footer/footer.jsx","common/infiniteScroll.js","common/loader.js","common/MovieContainer/movieContainer.jsx","common/MovieContainer/index.js","components/Homepage/homepage.jsx","components/Homepage/index.js","common/videoModal.js","components/MovieDetails/movieDetails.jsx","components/MovieDetails/index.js","helper/index.js","common/MovieCard/movieCard.jsx","common/MovieCard/index.js","components/MovieListing/movieListing.jsx","components/MovieListing/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","useState","show","showMenu","className","Container","to","src","logo","alt","onClick","title","href","Footer","InfiniteScroll","props","rootElement","React","createRef","lastRef","this","initalizeScrollObserver","scrollHandler","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","root","threshold","rootMargin","observe","ref","children","Component","Loader","id","CDN","process","REACT_APP_CDN","MovieContainer","moviePoster","movieTitle","movieUrls","Row","Col","sm","md","defaultImage","map","movieData","index","key","poster_path","original_title","API_KEY","REACT_APP_API_KEY","API_URL","REACT_APP_API_URL","Home","state","movieList","search","releaseDate","Date","showLoader","fetchLatestMovieList","a","setState","axios","get","params","api_key","page","response","data","results","inputHandler","event","target","name","value","transformMovieList","convertedData","count","length","temp","urls","slice","push","banner","Form","Group","Control","type","placeholder","onChange","Button","variant","icon","filter","Boolean","VideoModal","toggleVideoModal","handleToggleVideoModal","videoSrc","Modal","onHide","size","centered","Body","width","height","frameborder","allowFullScreen","MovieDetails","productionCompanies","genres","productionCountries","movieLanguages","imageList","ratings","movieDescription","duration","fetchMovieDetail","movie_id","match","append_to_response","movieDetail","production_companies","production_countries","spoken_languages","videos","backdrop_path","vote_average","overview","runtime","release_date","images","backdrops","window","scrollTo","date","format","company","genre","country","iso_3166_1","language","iso_639_1","moment","image","file_path","MovieCard","posterPath","movieRating","lg","SortingList","MovieListing","searchMovieName","sortBy","movieRatings","activeSort","fetchSearchMovieList","movieName","query","searchResponse","movieListResponse","fetchSortedMovieList","sort_by","sortResponse","onSearchInputHandler","handleSortBy","setActiveSort","sort","getActiveClass","delayedCallback","func","delay","debounceTimer","context","args","arguments","clearTimeout","setTimeout","apply","debounce","library","add","faStar","faArrowUp","faArrowDown","faPlay","faChevronRight","App","exact","path","component","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ff28905.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-image-portrait.f3539392.png\";","module.exports = __webpack_public_path__ + \"static/media/banner.a0de6305.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.6a38fde9.svg\";","import Header from './header';\n\nexport default Header;","import React, { useState } from 'react';\nimport { Container } from 'react-bootstrap';\nimport logo from '../../images/logo.svg';\nimport { Link } from 'react-router-dom'\nconst Header = () => {\n    const [show, showMenu] = useState(false);\n\n    return (\n        <div className=\"header-holder\">\n            <Container className=\"header-content\">\n                <div className=\"logo\">\n                    <Link to=\"/\">\n                        <img src={logo} alt=\"logo\" />\n                    </Link>\n                </div>\n                <div className={`hamburger ${show && 'rotate-hamburger'}`} onClick={() => showMenu(!show)}>\n                    <div className=\"hamburger-item\"></div>\n                    <div className=\"hamburger-item\"></div>\n                    <div className=\"hamburger-item\"></div>\n                </div>\n            </Container>\n\n            <div className={`menu ${show && 'move-menu'}`}>\n                <ul className=\"nav-items list-unstyled\">\n                    <li className=\"nav-item has-menu\" onClick={() => showMenu(!show)}>\n                        <Link to=\"/\" title=\"G0 to home\">\n                            Home\n                        </Link>\n                    </li>\n                    <li className=\"nav-item mt-5\" onClick={() => showMenu(!show)}>\n                        <Link to=\"/MovieListing/\" title=\"List of Latest Movies\">\n                            Movie List\n                        </Link>\n                    </li>\n                    <li className=\"nav-item mt-5\" onClick={() => showMenu(!show)}>\n                        <a href=\"index.html\" title=\"say hello\">\n                            Contact\n                        </a>\n                    </li>\n                </ul>\n            </div>\n            <div className={`banner ${show && 'move-menu'}`}></div>\n        </div>\n    )\n}\n\nexport default Header;","import Footer from './footer';\n\n\nexport default Footer;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst footer = () =>{\n    return(\n        <div className=\"footer-holder\">\n            <Container>\n            </Container>\n        </div>\n    )\n}\n\nexport default footer","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n// import 'intersection-observer';\n\nclass InfiniteScroll extends Component {\n\n    constructor(props){\n        super(props);\n        this.rootElement = React.createRef();\n        this.lastRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.initalizeScrollObserver();\n    }\n\n    initalizeScrollObserver() {\n        const { scrollHandler } = this.props;\n        // const rootElem = this.rootElement.current;\n        if (!this.lastRef.current || !scrollHandler) return;\n\n        let options = {\n            root: null, //observing element\n            threshold: 1, //when to trigger\n            rootMargin: \"0px\" // margin for the observer\n        }\n\n        let observer = new IntersectionObserver((entries, observer) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    scrollHandler();\n                }\n            });\n        }, options);\n\n        observer.observe(this.lastRef.current);\n    }\n\n    render() {\n        return (\n            <div ref={this.rootElement} className=\"infinite-holder\">\n                {this.props.children}\n                <div ref={this.lastRef}></div>\n            </div>\n        );\n    }\n}\n\nInfiniteScroll.propTypes = {\n    scrollHandler: PropTypes.func.isRequired\n}\n\nexport default InfiniteScroll;","import React from 'react';\n\nexport const Loader = () => {\n\n    return (\n        <div id=\"loader-container\">\n            <p id=\"loadingText\">Loading</p>\n        </div>\n    )\n}","import React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport defaultImage from '../../images/default-image-portrait.png';\n\nconst CDN = process.env.REACT_APP_CDN;\n\nconst MovieContainer = ({\n    id,\n    moviePoster,\n    movieTitle,\n    movieUrls,\n}) => {\n    return (\n        <Row className=\"movie-list\">\n            <Col sm={12} md={6} className=\"p-0 single-movie-holder\">\n                <div className=\"movie-item\">\n                    <Link to={`/movieDetails/${id}`}>\n                        <img\n                            src={moviePoster ? `${CDN}w780${moviePoster}` : defaultImage}\n                            className=\"movie-banner\"\n                            alt={movieTitle}\n                        />\n                    </Link>\n                </div>\n            </Col>\n            <Col sm={12} md={6} className=\"p-0 multiple-movie-holder movie-item\">\n                {\n                    movieUrls.map((movieData, index) => (\n\n                        <div className=\"movie-item\" key={index}>\n                            <Link to={`/movieDetails/${movieData.id}`}>\n                                <img\n                                    src={movieData.poster_path ? `${CDN}w342${movieData.poster_path}` : defaultImage}\n                                    className=\"movie-banner\"\n                                    alt={movieData.original_title}\n                                />\n                            </Link>\n                        </div>\n\n                    ))\n                }\n            </Col>\n        </Row>)\n}\n\nexport default MovieContainer;","import MovieContainer from './movieContainer';\n\nexport default MovieContainer","import React from 'react';\nimport banner from '../../images/banner.jpg';\n\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport InfiniteScroll from '../../common/infiniteScroll';\nimport { Loader } from '../../common/loader';\nimport MovieContainer from '../../common/MovieContainer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass Homepage extends React.Component {\n    state = {\n        movieList: [],\n        search: '',\n        releaseDate: new Date(),\n        showLoader: false\n    }\n\n    componentDidMount() {\n        this.page = 1;\n        this.fetchLatestMovieList();\n    }\n\n    fetchLatestMovieList = async () => {\n        this.setState({ showLoader: true });\n\n        try {\n            const response = await axios.get(`${API_URL}movie/now_playing`,\n                {\n                    params: {\n                        api_key: API_KEY,\n                        // 'primary_release_date.lte': new Date(),\n                        // sort_by: 'release_date.desc',\n                        page: this.page,\n                    }\n                });\n            if (response) {\n\n                const movieList = response.data.results;\n\n                this.setState({\n                    movieList: [...this.state.movieList, ...movieList]\n                });\n                this.setState({ showLoader: false })\n            }\n        }\n        catch (error) {\n            this.setState({ showLoader: false })\n        }\n    }\n\n    inputHandler = event => {\n        const key = event.target.name;\n        const value = event.target.value;\n\n        this.setState({\n            [key]: value\n        });\n    }\n\n    transformMovieList = (movieData) => {\n        const convertedData = [];\n        let count = 0;\n\n        while (count < movieData.length) {\n            let temp = {};\n            temp = { ...movieData[count] };\n            count++;\n            temp = { ...temp, urls: movieData.slice(count, count + 4) };\n            convertedData.push({ ...temp });\n            count = count + 4;\n        }\n        return convertedData;\n    }\n\n    scrollHandler = () => {\n        this.page++;\n        this.fetchLatestMovieList()\n    }\n\n\n    render() {\n        const {\n            movieList,\n            search,\n            showLoader\n        } = this.state;\n        const response = this.transformMovieList([...movieList]);\n        return (\n            <InfiniteScroll scrollHandler={this.scrollHandler}>\n                <div className=\"main-content-holder homepage-holder\">\n                    <div className=\"banner-holder\">\n                        <img src={banner} alt=\"banner\" className=\"banner-img\" />\n                        <Container className=\"search-holder\">\n                            <Row className=\"search-content\">\n                                <Col sm={12} md={10}>\n                                    <Form.Group className=\"mb-md-0\">\n                                        <Form.Control\n                                            type=\"text\"\n                                            name=\"search\"\n                                            placeholder=\"What are you looking for?\"\n                                            onChange={this.inputHandler}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                                <Col sm={12} md={2}>\n                                    <Link to={`/MovieListing/${search}`}>\n                                        <Button variant=\"primary\" type=\"button\">\n                                            Search <FontAwesomeIcon className=\"icon\" icon=\"chevron-right\" />  \n                                        </Button>\n                                    </Link>\n                                </Col>\n                            </Row>\n                        </Container>\n                    </div>\n\n                    <Container className=\"movie-list-holder\">\n                        <div className=\"section-header\">\n                            <h2>Latest Movies</h2>\n                            <p className=\"see-all\">\n                                <Link to=\"/MovieListing/\">see all</Link>\n                            </p>\n                        </div>\n                        <div className=\"movie-list-content\">\n                            {response.filter(Boolean).map((data, index) => (\n                                <MovieContainer\n                                    movieData={data}\n                                    id = {data.id}\n                                    moviePoster = {data.poster_path}\n                                    movieTitle = {data.original_title}\n                                    movieUrls = {data.urls}\n                                    key={index}\n                                />\n                            )\n                            )}\n                        </div>\n                    </Container>\n                </div>\n                {\n                    showLoader && <Loader />\n                }\n\n            </InfiniteScroll>\n        )\n    }\n}\n\nexport default Homepage;","import Home from './homepage.jsx';\n\nexport default Home;","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\nconst VideoModal = ({\n    toggleVideoModal,\n    handleToggleVideoModal,\n    videoSrc\n}) => {\n\n    return (\n        <Modal\n            show={toggleVideoModal}\n            onHide={handleToggleVideoModal}\n            size=\"lg\"\n            centered\n        >\n            <Modal.Body>\n                <iframe width=\"100%\" height=\"345\" src={`//www.youtube.com/embed/${videoSrc}?autoplay=\"1\"`} frameborder=\"0\" allowFullScreen>\n                </iframe>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default VideoModal;","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport VideoModal from '../../common/videoModal'\r\nimport { convertDate } from '../../helper'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst CDN = process.env.REACT_APP_CDN;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nclass MovieDetails extends React.Component {\r\n   state = {\r\n      toggleVideoModal: false,\r\n      productionCompanies: [],\r\n      genres: [],\r\n      productionCountries: [],\r\n      movieLanguages: [],\r\n      videoSrc: [],\r\n      imageList: [],\r\n      banner: '',\r\n      ratings: 0.0,\r\n      movieTitle: '',\r\n      movieDescription: '',\r\n      duration: '',\r\n      releaseDate: ''\r\n   }\r\n\r\n   componentDidMount() {\r\n      window.scrollTo(0, 0);\r\n      this.fetchMovieDetail()\r\n   }\r\n\r\n   fetchMovieDetail = async () => {\r\n      const { movie_id } = this.props.match.params;\r\n      const response = await axios.get(`${API_URL}movie/${movie_id}`,\r\n         {\r\n            params: {\r\n               api_key: API_KEY,\r\n               page: 1,\r\n               append_to_response: 'videos,images'\r\n            }\r\n         });\r\n      const movieDetail = response.data\r\n      this.setState({\r\n         productionCompanies: [...movieDetail.production_companies],\r\n         genres: [...movieDetail.genres],\r\n         productionCountries: [...movieDetail.production_countries],\r\n         movieLanguages: [...movieDetail.spoken_languages],\r\n         videoSrc: movieDetail.videos.results[0].key,\r\n         banner: movieDetail.backdrop_path,\r\n         ratings: movieDetail.vote_average,\r\n         movieTitle: movieDetail.original_title,\r\n         movieDescription: movieDetail.overview,\r\n         duration: movieDetail.runtime,\r\n         releaseDate: movieDetail.release_date,\r\n         imageList: [...movieDetail.images.backdrops]\r\n      })\r\n   }\r\n\r\n   handleToggleVideoModal = () => {\r\n      this.setState({\r\n         toggleVideoModal: !this.state.toggleVideoModal\r\n      })\r\n   }\r\n\r\n   render() {\r\n      const {\r\n         toggleVideoModal,\r\n         productionCompanies,\r\n         productionCountries,\r\n         movieLanguages,\r\n         videoSrc,\r\n         imageList,\r\n         genres,\r\n         banner,\r\n         ratings,\r\n         movieTitle,\r\n         movieDescription,\r\n         duration,\r\n         releaseDate\r\n      } = this.state\r\n      return (\r\n         <div className=\"main-content-holder movie-details-holder\">\r\n            <div className=\"banner-holder\">\r\n               <img src={`${CDN}original${banner}`} alt=\"banner\" className=\"banner-img\" />\r\n               <div className=\"banner-movie-info-section\">\r\n                  <Container className=\"banner-movie-info-content\">\r\n                     <Row className=\"banner-movie-info-rating-section\">\r\n                        <Col sm={6} md={5} className=\"banner-movie-info\">\r\n                           <div className=\"banner-movie-companies\">\r\n                              {productionCompanies.slice(0, 2).map((company, index) => (\r\n                                 <p className=\"mb-0\" key={index}>{company.name}</p>\r\n                              ))}\r\n                           </div>\r\n                           <div className=\"banner-movie-duration-genre\">\r\n                              <p className=\"banner-movie-duration mb-0\">{duration}min</p>\r\n                              {genres.slice(0, 2).map((genre, index) => (\r\n                                 <span className=\"banner-movie-genre mb-0 mr-2 has-comma\" key={index}>{genre.name}</span>\r\n                              ))}\r\n                           </div>\r\n                        </Col>\r\n                        <Col sm={6} className=\"banner-movie-rating\">\r\n                           {ratings}\r\n                        </Col>\r\n                     </Row>\r\n                     <Row className=\"banner-movie-title-trailer-section\">\r\n                        <Col sm={12} md={9} className=\"banner-movie-title\">\r\n                           <div>{movieTitle}</div>\r\n                        </Col>\r\n                        <Col sm={12} md={3} className=\"banner-movie-title-btn\" >\r\n                           <div className=\"trailer-btn\" onClick={this.handleToggleVideoModal}>\r\n                              <FontAwesomeIcon icon=\"play\" />\r\n                           </div>\r\n                        </Col>\r\n                     </Row>\r\n                  </Container>\r\n               </div>\r\n            </div>\r\n            <Container>\r\n               <Row className=\"movie-details-overview-holder justify-content-between\">\r\n                  <Col sm={12} md={4} className=\"movie-details-holder mb-4\">\r\n                     <div className=\"movie-details-content\">\r\n                        <p className=\"sub-header\">Details</p>\r\n                        <div className=\"movie-details-section\">\r\n                           <div className=\"movie-details-content movie-country\">\r\n                              <div className=\"details-content-title\">country</div>\r\n                              <div className=\"details-content-data\">\r\n                                 {productionCountries.map((country, index) => (\r\n                                    <span className=\"mr-1 has-coma\" key={index}>{country.iso_3166_1}</span>\r\n                                 ))}\r\n                              </div>\r\n                           </div>\r\n                           <div className=\"movie-details-content\">\r\n                              <div className=\"details-content-title\">Language</div>\r\n                              <div className=\"details-content-data\">\r\n                                 {movieLanguages.map((language, index) => (\r\n                                    <span className=\"mr-1\" key={index} >{language.iso_639_1},</span>\r\n                                 ))}\r\n                              </div>\r\n                           </div>\r\n                           <div className=\"movie-details-content\">\r\n                              <div className=\"details-content-title\">release date</div>\r\n                              <div className=\"details-content-data\">\r\n                                 {\r\n                                    convertDate(releaseDate, \"DD MMMM YYYY\")\r\n                                 }\r\n                              </div>\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </Col>\r\n                  <Col sm={12} md={7} className=\"movie-overview-holder mb-4\">\r\n                     <div className=\"movie-overview-content-holder\">\r\n                        <p className=\"sub-header\">overview</p>\r\n                        <div className=\"movie-overview-section\">\r\n                           <div className=\"movie-overview-content movie-overview\">\r\n                              {movieDescription}\r\n                           </div>\r\n                           <div className=\"movie-overview-content movie-genre\">\r\n                              {genres.map((genre, index) => (\r\n                                 <p key={index} className=\"list-items\">{genre.name}</p>\r\n                              ))}\r\n\r\n                           </div>\r\n                        </div>\r\n                     </div>\r\n                  </Col>\r\n               </Row>\r\n               <Row className=\"movie-company-trailer-holder\">\r\n                  <Col sm={12} md={4}>\r\n                     <div className=\"movie-company-list\">\r\n                        <p className=\"sub-header\">production Companies</p>\r\n                        {productionCompanies.map((company, index) => (\r\n                           <div className=\"movie-company list-items\" key={index}>\r\n                              <p className=\"mb-0\">{company.name}</p>\r\n                           </div>\r\n                        ))}\r\n                     </div>\r\n                     <div className=\"movie-image-holder\">\r\n                        <p className=\"sub-header\">Photo Gallery</p>\r\n                        <div className=\"movie-image-list\">\r\n                           {imageList.slice(0, 6).map((image, index) => (\r\n                              <div className=\"movie-image w-50\" key={index}>\r\n                                 <img src={`${CDN}w300${image.file_path}`} alt=\"\" />\r\n                              </div>\r\n                           ))}\r\n\r\n                        </div>\r\n                     </div>\r\n                  </Col>\r\n                  <Col sm={12} md={8}>\r\n                     <iframe width=\"100%\" height=\"345\" src={`https://www.youtube.com/embed/${videoSrc}`}>\r\n                     </iframe>\r\n                  </Col>\r\n               </Row>\r\n            </Container>\r\n            <VideoModal\r\n               toggleVideoModal={toggleVideoModal}\r\n               handleToggleVideoModal={this.handleToggleVideoModal}\r\n               videoSrc={videoSrc}\r\n            />\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default MovieDetails;","import MovieDetails from './movieDetails';\n\nexport default MovieDetails","import moment from 'moment';\n\nexport const convertDate = (date, format) => {\n    const convertedDate = moment(date).format(format);\n    return convertedDate;\n}\n\nexport const debounce = (func, delay) => { \n    let debounceTimer \n    return function() { \n        const context = this\n        const args = arguments \n            clearTimeout(debounceTimer) \n                debounceTimer \n            = setTimeout(() => func.apply(context, args), delay) \n    } \n}  ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Col } from 'react-bootstrap';\nimport defaultImage from '../../images/default-image-portrait.png';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nconst CDN = process.env.REACT_APP_CDN;\n\nconst MovieCard = ({\n    id,\n    posterPath,\n    movieTitle,\n    releaseDate,\n    movieRating\n}) => (\n        <Col\n            sm={12}\n            md={4}\n            lg={3}\n\n            className=\"movie-holder\"\n        >\n            <Link to={`/movieDetails/${id}`}>\n                <div className=\"movie\">\n                    <img\n                        src={posterPath ? `${CDN}w500${posterPath}` : defaultImage}\n                        className=\"movie-banner\"\n                        alt={movieTitle}\n                    />\n                    <div className=\"movie-content\">\n                        <div className=\"movie-title mt-2\">\n                            {movieTitle}\n                        </div>\n                        <div className=\"movie-info mt-2\">\n                            <div className=\"movie-release-date\">\n                                {releaseDate}\n                            </div>\n                            <div className=\"movie-ratings\">\n                                <FontAwesomeIcon icon=\"star\" />{movieRating}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Link>\n        </Col>\n    )\nexport default MovieCard;","import MovieCard from './movieCard';\n\nexport default MovieCard;\n","import React from 'react';\r\nimport banner from '../../images/banner.jpg';\r\nimport defaultImage from '../../images/default-image-portrait.png';\r\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport { debounce } from '../../helper';\r\n// import InfiniteScroll from '../../common/infiniteScroll';\r\nimport { Loader } from '../../common/loader';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport MovieCard from '../../common/MovieCard';\r\n\r\nconst CDN = process.env.REACT_APP_CDN;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconst SortingList = {\r\n    name: 'name',\r\n    ratings: 'ratings',\r\n    releaseDate: 'releaseDate',\r\n}\r\nclass MovieListing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.delayedCallback = debounce(this.fetchSearchMovieList, 720);\r\n        this.page = 1;\r\n    }\r\n    state = {\r\n        movieList: [],\r\n        searchMovieName: '',\r\n        sortBy: 'popularity.asc',\r\n        posterPath: defaultImage,\r\n        movieTitle: '',\r\n        releaseDate: new Date(),\r\n        movieRatings: 0,\r\n        activeSort: '',\r\n        showLoader: false\r\n    }\r\n    componentDidMount() {\r\n        const { movieName } = this.props.match.params\r\n\r\n        if (movieName) {\r\n\r\n            this.fetchSearchMovieList(movieName)\r\n        }\r\n        else\r\n            this.fetchSortedMovieList()\r\n    }\r\n\r\n    fetchSearchMovieList = async (movieName) => {\r\n        this.setState({ showLoader: true });\r\n        try {\r\n            const searchResponse = await axios.get(`${API_URL}search/movie`,\r\n                {\r\n                    params: {\r\n                        api_key: API_KEY,\r\n                        query: movieName,\r\n                    }\r\n                }\r\n            );\r\n            if (searchResponse) {\r\n                const movieListResponse = searchResponse.data.results;\r\n                this.setState({\r\n                    movieList: [...movieListResponse]\r\n                });\r\n            }\r\n            this.setState({ showLoader: false });\r\n        }\r\n        catch (error) {\r\n            this.setState({ showLoader: false });\r\n        }\r\n    }\r\n\r\n    fetchSortedMovieList = async () => {\r\n        this.setState({ showLoader: true });\r\n        const { releaseDate, sortBy } = this.state\r\n        try {\r\n            const sortResponse = await axios.get(`${API_URL}discover/movie`,\r\n                {\r\n                    params: {\r\n                        api_key: API_KEY,\r\n                        page: this.page,\r\n                        sort_by: sortBy,\r\n                        \"primary_release_date.lte\": releaseDate\r\n                    }\r\n                }\r\n\r\n            );\r\n            if (sortResponse) {\r\n                const movieList = sortResponse.data.results;\r\n                this.setState({\r\n                    movieList: [...movieList]\r\n                });\r\n            }\r\n            this.setState({ showLoader: false });\r\n        }\r\n\r\n        catch (error) {\r\n            this.setState({ showLoader: false });\r\n        }\r\n    }\r\n\r\n    onSearchInputHandler = event => {\r\n        const key = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        // this.delayedCallback(value)\r\n\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n\r\n        // delayedCallback\r\n    }\r\n\r\n    // scrollHandler = () => {\r\n    //     this.page++;\r\n    //     this.fetchSortedMovieList()\r\n    // }\r\n\r\n    handleSortBy = async () => {\r\n        const { activeSort, sortBy } = this.state;\r\n        switch (activeSort) {\r\n            case 'name':\r\n                await this.setState({\r\n                    sortBy: sortBy === 'original_title.asc' ? 'original_title.desc' : 'original_title.asc',\r\n                });\r\n\r\n                break;\r\n\r\n            case 'ratings':\r\n                this.setState({\r\n                    sortBy: sortBy === 'vote_average.asc' ? 'vote_average.desc' : 'vote_average.asc',\r\n                });\r\n                break;\r\n\r\n            case 'releaseDate':\r\n                this.setState({\r\n                    sortBy: sortBy === 'primary_release_date.asc' ? 'primary_release_date.desc' : 'primary_release_date.asc',\r\n                });\r\n                break;\r\n        }\r\n\r\n        this.fetchSortedMovieList(sortBy)\r\n    }\r\n\r\n    setActiveSort = async (sort) => {\r\n        await this.setState({\r\n            activeSort: sort\r\n        })\r\n        this.handleSortBy();\r\n    }\r\n\r\n    getActiveClass = (sortBy) => {\r\n        const { activeSort } = this.state;\r\n        if (activeSort === sortBy)\r\n            return 'sort-item active'\r\n        else\r\n            return 'sort-item'\r\n    }\r\n\r\n\r\n    render() {\r\n        const {\r\n            movieList,\r\n            searchMovieName,\r\n            showLoader,\r\n            sortBy\r\n        } = this.state;\r\n        return (\r\n            <div className=\"main-content-holder homepage-holder\">\r\n                <div className=\"banner-holder\">\r\n                    <img src={banner} alt=\"banner\" className=\"banner-img\" />\r\n                    <Container className=\"search-holder\">\r\n                        <Row className=\"search-content\">\r\n                            <Col sm={12} md={10}>\r\n                                <Form.Group className=\"mb-md-0\">\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        name=\"searchMovieName\"\r\n                                        placeholder=\"What are you looking for?\"\r\n                                        onChange={this.onSearchInputHandler}\r\n                                    />\r\n                                </Form.Group>\r\n                            </Col>\r\n                            <Col sm={12} md={2}>\r\n                                <Link to={`/movieListing/${searchMovieName}`}>\r\n                                    <Button variant=\"primary\" type=\"submit\" onClick={() => this.fetchSearchMovieList(searchMovieName)}>\r\n                                        Search\r\n                                        <FontAwesomeIcon className=\"icon\" icon=\"chevron-right\" />\r\n                                    </Button>\r\n                                </Link>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Container className=\"movie-list-holder\">\r\n                    <div className=\"section-header\">\r\n                        <h2>Showing {movieList.length} Movies</h2>\r\n                    </div>\r\n                    <div className=\"sorting-section mb-5\">\r\n                        <div className=\"mr-md-3 sort-header\">Sort By</div>\r\n                        <div className={this.getActiveClass(SortingList.name)} onClick={() => this.setActiveSort(SortingList.name)}>\r\n                            Name <FontAwesomeIcon icon={`${sortBy === 'original_title.asc' ? 'arrow-up' : 'arrow-down'}`} />\r\n                        </div>\r\n                        <div className={this.getActiveClass(SortingList.ratings)} onClick={() => this.setActiveSort(SortingList.ratings)}>\r\n                            Rating <FontAwesomeIcon icon={`${sortBy === 'vote_average.asc' ? 'arrow-up' : 'arrow-down'}`} />\r\n                        </div>\r\n                        <div className={this.getActiveClass(SortingList.releaseDate)} onClick={() => this.setActiveSort(SortingList.releaseDate)}>\r\n                            release date <FontAwesomeIcon icon={`${sortBy === 'primary_release_date.asc' ? 'arrow-up' : 'arrow-down'}`} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"movie-list\">\r\n                        <Row>\r\n                            {movieList.filter(Boolean).map((data, index) =>\r\n                                (\r\n                                    <MovieCard\r\n                                        id={data.id}\r\n                                        posterPath={data.poster_path}\r\n                                        movieTitle={data.original_title}\r\n                                        releaseDate={data.release_date}\r\n                                        movieRating={data.vote_average}\r\n                                        key={index}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </Row>\r\n                    </div>\r\n                </Container>\r\n                {\r\n                    showLoader && <Loader />\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MovieListing;","import MovieListing from './movieListing';\n\nexport default MovieListing;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/style.scss';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch\n} from \"react-router-dom\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faStar, faArrowUp, faArrowDown, faPlay, faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Home from './components/Homepage';\nimport MovieDetails from './components/MovieDetails/';\nimport MovieListing from './components/MovieListing';\n\nlibrary.add(faStar, faArrowUp, faArrowDown, faPlay, faChevronRight)\nfunction App() {\n  return (\n    <Router>\n      <Header />\n      <Switch>\n        <Route exact={true} path=\"/MovieDetails/:movie_id\" component={MovieDetails} />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact={true} path=\"/MovieListing/:movieName\" component={MovieListing} />\n        <Route exact={true} path=\"/MovieListing/\" component={MovieListing} />\n      </Switch>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}